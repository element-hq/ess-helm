{{- /*
Copyright 2024 New Vector Ltd

SPDX-License-Identifier: AGPL-3.0-only
*/ -}}

{{- with $.Values.matrixRTC -}}
{{- if .enabled -}}
{{- with .sfu -}}
{{- if .enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
{{- with .annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
{{- end }}
  labels:
    {{- include "element-io.matrix-rtc-sfu.labels" (dict "root" $ "context" .) | nindent 4 }}
    k8s.element.io/matrix-rtc-sfu-config-hash: {{ include "element-io.matrix-rtc-sfu.configmap-data" (dict "root" $ "context" .) | sha1sum }}
  name: {{ $.Release.Name }}-matrix-rtc-sfu
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ $.Release.Name }}-matrix-rtc-sfu
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  template:
    metadata:
      labels:
        {{- include "element-io.matrix-rtc-sfu.labels" (dict "root" $ "context" (dict "image" .image "labels" .labels "withChartVersion" false)) | nindent 8 }}
        k8s.element.io/matrix-rtc-sfu-config-hash: {{ include "element-io.matrix-rtc-sfu.configmap-data" (dict "root" $ "context" .) | sha1sum }}
{{- with .annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
{{- end }}
    spec:
{{- with .hostAliases }}
      hostAliases:
        {{- tpl (toYaml . | nindent 8) $ }}
{{- end }}
{{- include "element-io.ess-library.pods.commonSpec" (dict "root" $ "context" (dict "componentValues" . "instanceSuffix" "matrix-rtc-sfu" "deployment" true "usesMatrixTools" true)) | nindent 6 }}
{{- if not (.livekitAuth).keysYaml }}
      initContainers:
      - name: render-config
{{- with $.Values.matrixTools.image }}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ required "matrixTools.image.tag is required if no digest" .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        env:
        {{- (include "element-io.matrix-rtc-sfu.env" (dict "root" $ "context" .)) | nindent 8 }}
        - name: "LIVEKIT_KEY"
          value: "{{ (.livekitAuth).key | default "matrix-rtc" }}"
        - name: LIVEKIT_SECRET
          value: >-
           {{ (printf "{{ readfile \"/secrets/%s\" }}" (
                (include "element-io.ess-library.init-secret-path" (
                    dict "root" $
                    "context" (dict
                      "secretPath" "matrixRTC.livekitAuth.secret"
                      "initSecretKey" "ELEMENT_CALL_LIVEKIT_SECRET"
                      "defaultSecretName" (printf "%s-matrix-rtc-authorisation-service" $.Release.Name)
                      "defaultSecretKey" "LIVEKIT_SECRET"
                      )
                    )
                  )
                )
              )
           }}
        command:
        - "/matrix-tools"
        - render-config
        - -output
        - /conf/keys.yaml
        - /config-templates/keys-template.yaml
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /config-templates
          name: plain-config
          readOnly: true
        - mountPath: /conf
          name: rendered-config
          readOnly: false
{{- range $secret := include "element-io.matrix-rtc-authorisation-service.configSecrets" (dict "root" $ "context" $.Values.matrixRTC) | fromJsonArray }}
        - mountPath: /secrets/{{ tpl $secret $ }}
          name: "secret-{{ tpl $secret $ }}"
          readOnly: true
{{- end }}
{{- end }}
      hostNetwork: {{ .hostNetwork }}
      containers:
      - name: sfu
        args:
        - --config
        - /conf/config.yaml
{{- with .image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ required ".matrixRTC.sfu.image.tag is required if no digest" .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
{{- with (include "element-io.matrix-rtc-sfu.env" (dict "root" $ "context" .)) }}
        env:
          {{- . | nindent 10 }}
  {{- end }}
        ports:
        - containerPort: 6789
          name: metrics
          protocol: TCP
        - containerPort: 7880
          name: http
          protocol: TCP
{{- with .exposedServices }}
  {{- with .rtcTcp }}
  {{- if .enabled }}
        - containerPort: {{ .port }}
    {{- if eq .type "HostPort" }}
          hostPort: {{ .port }}
    {{- end }}
          name: rtc-tcp
          protocol: TCP
  {{- end }}
  {{- end }}
  {{- with .rtcMuxedUdp }}
  {{- if .enabled }}
        - containerPort: {{ .port }}
    {{- if eq .type "HostPort" }}
          hostPort: {{ .port }}
    {{- end }}
          name: rtc-muxed-udp
          protocol: TCP
  {{- end }}
  {{- end }}
  {{- with .rtcUdp }}
  {{- if .enabled }}
    {{- $portType := .type -}}
    {{- with .portRange }}
    {{- range $port := untilStep (.startPort | int) (.endPort | int) 1 }}
        - containerPort: {{ $port }}
          name: rtc-udp-{{ $port }}
          protocol: UDP
      {{ if eq $portType "HostPort" }}
          hostPort: {{ $port }}
      {{- end }}
    {{- end }}
    {{- end }}
  {{- end }}
  {{- end }}
{{- end }}
        livenessProbe: {{- include "element-io.ess-library.pods.probe" .livenessProbe | nindent 10 }}
          httpGet:
            path: /
            port: http
        readinessProbe: {{- include "element-io.ess-library.pods.probe" .readinessProbe | nindent 10 }}
          httpGet:
            path: /
            port: http
        startupProbe: {{- include "element-io.ess-library.pods.probe" .startupProbe | nindent 10 }}
          httpGet:
            path: /
            port: http
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /rendered-config
          name: rendered-config
        - mountPath: /conf/config.yaml
          name: plain-config
          subPath: config.yaml
      volumes:
{{- range $secret := include "element-io.matrix-rtc-authorisation-service.configSecrets" (dict "root" $ "context" $.Values.matrixRTC) | fromJsonArray }}
      - secret:
          secretName: {{ tpl $secret $ }}
        name: secret-{{ tpl $secret $ }}
{{- end }}
      - configMap:
          name: "{{ $.Release.Name }}-matrix-rtc-sfu"
          defaultMode: 420
        name: plain-config
      - emptyDir:
          medium: Memory
        name: "rendered-config"
{{- end }}
{{- end }}
{{- end -}}
{{- end -}}
