# Copyright 2024 New Vector Ltd
#
# SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial

{{- if .Values.synapse.enabled | default true -}}
{{- $enabledWorkers := (include "element-io.synapse.enabledWorkers" $) | fromJson }}
{{- range $processType, $unmergedProcessDetails := merge $enabledWorkers (dict "main" dict) }}
{{- $perProcessRoot := merge (dict "ProcessType" $processType) $ }}
{{- with dict "Values" (merge dict ($unmergedProcessDetails | deepCopy) ($.Values | deepCopy)) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
{{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
{{- end }}
  labels:
    {{- include "element-io.synapse.process.labels" $perProcessRoot | nindent 4 }}
    k8s.element.io/confighash: "{{ include (print $.Template.BasePath "/synapse/synapse_secret.yaml") $ | sha1sum }}"
    k8s.element.io/logconfighash: "{{ include (print $.Template.BasePath "/synapse/synapse_configmap.yaml") $ | sha1sum }}"
{{- range $index, $appservice := .Values.appservices }}
    k8s.element.io/as-registration-{{ $index }}-hash: "{{ (lookup "v1" "ConfigMap" $.Release.Namespace $appservice.registrationFileConfigMap) | toJson | sha1sum }}"
{{- end }}
  name: {{ $.Release.Name }}-synapse-{{ $processType }}
  namespace: {{ $.Release.Namespace }}
spec:
  serviceName: {{ $.Release.Name }}-synapse-{{ $processType }}
  replicas: {{ .Values.instances | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ $.Release.Name }}-synapse-{{ $processType }}
  updateStrategy:
    type: RollingUpdate
  # Without this CrashLoopBackoffs due to config failures block pod recreation
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{- include "element-io.synapse.process.labels" $perProcessRoot | nindent 8 }}
        k8s.element.io/confighash: "{{ include (print $.Template.BasePath "/synapse/synapse_secret.yaml") $ | sha1sum }}"
        k8s.element.io/logconfighash: "{{ include (print $.Template.BasePath "/synapse/synapse_configmap.yaml") $ | sha1sum }}"
{{- range $index, $appservice := .Values.appservices }}
        k8s.element.io/as-registration-{{ $index }}-hash: "{{ (lookup "v1" "ConfigMap" $.Release.Namespace $appservice.registrationFileConfigMap) | toJson | sha1sum }}"
{{- end }}

{{- with .Values.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
{{- end }}
    spec:
      automountServiceAccountToken: false
      serviceAccountName: {{ include "element-io.synapse.serviceAccountName" $ }}
{{- include "element-io.ess-library.pods.pullSecrets" (list $ .Values.image) | nindent 6 }}
{{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- /*
We have an init container to render & merge the config for several reasons:
* We have external, user-supplied Secrets and don't want to use `lookup` as that doesn't work with things like ArgoCD
* We want to treat credentials provided in Helm the same as credentials in external Secrets
* We want to guarantee the order the YAML files are merged and while we can code to Synapse's current behavour that may change
* We could do this all in the main Synapse container but then there's potential confusion between `/config-templates`, `/conf` in the image and `/conf` the `emptyDir`
*/}}
      initContainers:
      - name: render-config
{{- with .Values.image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ .tag | default $.Chart.AppVersion }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .Values.containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        command:
        - "bash"
        - "-ce"
        - >
          {{- /* The filesystem structure is `/secrets`/<< secret name>>/<< secret key >>.
                 The non-defaulted values are handling the case where the credential is provided by an existing Secret
                 The default values are handling the case where the credential is provided plain in the Helm chart and we add it to our Secret with a well-known key.

                 These could be done as env vars with valueFrom.secretKeyRef, but that triggers CKV_K8S_35.
                 If we wanted to allow for replacement of values in the user-provided config with external Secrets we could extend this init-container
                 to allow extraEnv with valueFrom.secretKeyRef. */}}
          export SYNAPSE_MACAROON=$(cat /secrets/{{ .Values.macaroon.secret | default (printf "%s-synapse" $.Release.Name) }}/{{ .Values.macaroon.secretKey | default "MACAROON" }});
          export SYNAPSE_POSTGRES_PASSWORD=$(cat /secrets/{{ .Values.postgres.password.secret | default (printf "%s-synapse" $.Release.Name) }}/{{ .Values.postgres.password.secretKey | default "POSTGRES_PASSWORD" }});
          export SYNAPSE_REGISTRATION_SHARED_SECRET=$(cat /secrets/{{ .Values.registrationSharedSecret.secret | default (printf "%s-synapse" $.Release.Name) }}/{{ .Values.registrationSharedSecret.secretKey | default "REGISTRATION_SHARED_SECRET" }});

          set -x;
          export APPLICATION_NAME=$(hostname -s | sed 's/.*-synapse-//g');
          cp /config-templates/log_config.yaml /conf/log_config.yaml;

          python3 /config-templates/render_config_with_secrets.py \
            /config-templates/01-homeserver-underrides.yaml \
          {{- if .Values.additional.config }}
            /secrets/{{ $.Release.Name }}-synapse/02-homeserver-helm-user-provided.yaml \
          {{- end }}
          {{- if .Values.additional.configSecret }}
            /secrets/{{ .Values.additional.configSecret }}/{{ .Values.additional.configSecretKey }} \
          {{- end }}
            /config-templates/04-homeserver-overrides.yaml \
            /config-templates/05-{{ $processType }}.yaml \
            > /conf/homeserver.yaml;
{{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /config-templates
          name: plain-config
          readOnly: true
{{- range $secret := include "element-io.synapse.configSecrets" $ | fromJsonArray }}
        - mountPath: /secrets/{{ $secret }}
          name: "secret-{{ $secret }}"
          readOnly: true
{{- end }}
        - mountPath: /conf
          name: rendered-config
          readOnly: false
      containers:
      - name: synapse
{{- with .Values.image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ .tag | default $.Chart.AppVersion }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .Values.containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        command:
        - "bash"
        - "-cex"
        - >
          ls -lR /secrets;
          [ -e "/usr/lib/`uname -m`-linux-gnu/libjemalloc.so.2" ] && export LD_PRELOAD="/usr/lib/`uname -m`-linux-gnu/libjemalloc.so.2";
          python3 -m {{ include "element-io.synapse.process.app" $processType }} -c /conf/homeserver.yaml
{{- with .Values.extraEnv }}
        env:
          {{- toYaml . | nindent 10 }}
{{- end }}
        ports:
{{- if (include "element-io.synapse.process.hasHttp" $processType) }}
        - containerPort: 8008
          name: synapse-http
          protocol: TCP
{{- end }}
{{- if (include "element-io.synapse.process.hasReplication" $processType) }}
        - containerPort: 9093
          name: synapse-repl
          protocol: TCP
{{- end }}
        - containerPort: 8080
          name: synapse-health
          protocol: TCP
        - containerPort: 9001
          name: synapse-metrics
          protocol: TCP
        startupProbe:
          httpGet:
            path: /health
            port: synapse-health
          periodSeconds: 2
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: synapse-health
          periodSeconds: 6
          timeoutSeconds: 2
          {{- /* For Synapse processes where there can only be 1 instance we're more generous with the threshold.
                 This is because people can't scale the process up and so the impact of a restart is greater. */}}
          failureThreshold: {{ ternary 8 3 (eq "isSingle" (include "element-io.synapse.process.isSingle" $processType)) }}
        readinessProbe:
          httpGet:
            path: /health
            port: synapse-health
          periodSeconds: 2
          timeoutSeconds: 2
          successThreshold: 2
          failureThreshold: {{ ternary 8 3 (eq "isSingle" (include "element-io.synapse.process.isSingle" $processType)) }}
{{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
{{- range $secret := include "element-io.synapse.configSecrets" $ | fromJsonArray }}
        - mountPath: /secrets/{{ $secret }}
          name: "secret-{{ $secret }}"
          readOnly: true
{{- end }}
{{- range $appservice := .Values.appservices }}
        - name: {{ $appservice.registrationFileConfigMap }}
          mountPath: /as/{{ $appservice.registrationFileConfigMap }}/registration.yaml
          readOnly: true
          subPath: registration.yaml
{{- end }}
        - mountPath: /conf
          name: rendered-config
          readOnly: false
        - mountPath: /media
          name: media
          readOnly: false
        - mountPath: /tmp
          name: tmp
          readOnly: false
      volumes:
      - configMap:
          defaultMode: 420
          name: "{{ $.Release.Name }}-synapse"
        name: plain-config
{{- range $secret := include "element-io.synapse.configSecrets" $ | fromJsonArray }}
      - secret:
          secretName: {{ $secret }}
        name: secret-{{ $secret }}
{{- end }}
      - emptyDir:
          medium: Memory
        name: "rendered-config"
{{- range $appservice := .Values.appservices }}
      - configMap:
          defaultMode: 420
          name: "{{ $appservice.registrationFileConfigMap }}"
        name: {{ $appservice.registrationFileConfigMap }}
{{- end }}
{{- if (include "element-io.synapse.process.responsibleForMedia" (dict "processType" $processType "enabledWorkerTypes" (keys $enabledWorkers))) }}
      - persistentVolumeClaim:
          claimName: {{ include "element-io.synapse.pvcName" $ }}
        name: "media"
{{- else }}
      - emptyDir:
          medium: Memory
        name: "media"
{{- end }}
      - emptyDir:
          medium: Memory
        name: "tmp"
---
{{- end }}
{{- end }}
{{- end }}
